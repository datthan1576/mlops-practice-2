# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.9

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  REGISTRY: "registry.gitlab.com/m1f/mlops_cd"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  key:
    files:
      - poetry.lock
      - .gitlab-ci.yml
    prefix: ${CI_JOB_NAME}
  paths:
    - .venv/
    - .cache/pip

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY


stages:
  - build
  - deploy

docker_build:
  stage: build
  tags:
    - mlops
  only:
    - main
  script:
    - echo $CI_COMMIT_SHA
    - docker build -f Docker/model_service/Dockerfile -t $REGISTRY/dev/app:$CI_COMMIT_SHA .
    - docker push "$REGISTRY/dev/app:$CI_COMMIT_SHA"

docker_deploy:
  stage: deploy
  tags:
    - prod
  only:
    - main
  script:
    - $env:CONTAINER_PREFIX = "dev"
    - docker rm $(docker stop $(docker ps -a -q --filter name=dev*)); if (-not $?) {cd .}  # docker stop $(docker ps -a | grep ${CONTAINER_PREFIX}_ | awk '{print $1}') || true
#    - docker rm $(docker ps -a | grep ${CONTAINER_PREFIX}_ | awk '{print $1}') || true
    - docker volume rm $(docker volume ls -q --filter name=dev*); if (-not $?) {cd .}  # docker volume rm $(docker volume ls | grep ${CONTAINER_PREFIX}_ | awk '{print $2}') || true
    - docker-compose -p $env:CONTAINER_PREFIX -f docker-compose.dev.yaml up -d


#
#pytest:
#  script:
#    - poetry run dvc pull
#    - poetry run dvc repro
#    - poetry run pytest --disable-warnings


#type_test:
#  script:
#    - pip install mypy
#    - mypy --ignore-missing-imports clean_data.py
#

#lint_test:
#  script:
#    - flake8 src/data/clean_data.py